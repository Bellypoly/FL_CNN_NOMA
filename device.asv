classdef device
    %DEVICE Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        x
        y
        flop   % total # of FLOPs require at edge device
        c      % # of FLOPs in CPU cycle
        f      % CPU frequency of whole operation duration
        si     % const. coefficient depend on chip architecture
    end
    
    methods
        function obj = device(id)
            %% READ BINARY FILE and CREATE IMAGE ARRAY
            X = processImagesMNIST('dataset\t10k-images.idx3-ubyte');
            Y = processLabelsMNIST('dataset\t10k-labels.idx1-ubyte');
            
            if(id == 1)
                obj.x = X(:,:,1,1:300);        % DATASET MNIST@DEVICE 1 train : 0-300 | 1000 for test
                obj.y = Y(1:300);
                obj.c = 2;
                
                obj.si = 1;
            elseif(id == 2)
                obj.x = X(:,:,1,301:600);      % DATASET MNIST@DEVICE 2 train : 301-600 | 1000 for test
                obj.y = Y(301:600);
            elseif(id == 3)
                obj.x = X(:,:,1,301:600);      % DATASET MNIST@DEVICE 2 train : 301-600 | 1000 for test
                obj.y = Y(301:600);
            elseif(id == 0)
                obj.x = X(:,:,1,1001:2000);        % DATASET MNIST train : 1001-2000 | 1000 for test
                obj.y = Y(1001:2000);
            else
                obj.x = X;
                obj.y = Y;
            end
        end
        function flop = calculate_flop_cnn(obj)
        % ----------------------------------------------------------------------------------------------- %
        %| [36]                                                                                          |%
        %| CONVOLUTION_FLOPs = (spartial_w x spartial_h) x depth_n x (kernel_w x kernel_h) x depth_(n-1) |%
        %| - spartial_w = spartial_w_of_map                                                              |% 
        %| - spartial_h = spartial_h_of_map                                                              |% 
        %| - depth_n    = current layer depth                                                            |% 
        %| - depth_(n-1)= previous layer depth                                                           |% 
        %| - kernel_w   = kernel width                                                                   |% 
        %| - kernel_h   = kernel height                                                                  |%
        %|                                                                                               |%  
        %| FULLY-CONNECTED_FLOPs = #output x #input                                                      |%
        %| - #output    = # of Fully connected output                                                    |%
        %| - #input     = (kernel_w x kernel_h) x depth_(n-1)                                            |% 
        % ----------------------------------------------------------------------------------------------- %

            convolution_layer1 = (28*28)*4*(5*5)*1;
            convolution_layer2 = (12*12)*12*(5*5)*4;
            fully_connected_layer = (10*1*1)*(4*4*12);

            flop = convolution_layer1...
                + convolution_layer2...
                + fully_connected_layer;
        end
        function outputArg = method1(obj,inputArg)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            outputArg = obj.Property1 + inputArg;
        end
    end
end

